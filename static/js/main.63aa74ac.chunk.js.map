{"version":3,"sources":["components/InputText.js","components/OutputText.js","components/Button.js","App.js","serviceWorker.js","index.js"],"names":["style","marginTop","InputText","value","this","props","onChange","handleChange","id","className","rows","React","Component","OutputText","readOnly","dangerouslySetInnerHTML","fontSize","marginRight","lineHeight","onClick","type","icon","text","renderer","marked","Renderer","link","href","title","prototype","apply","arguments","replace","setOptions","breaks","defaultInputText","App","state","input","output","__html","bind","parseMarkdown","deleteText","resetText","copyToClipBoard","element","setState","target","inputText","navigator","clipboard","writeText","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"6RAEMA,EAAQ,CACVC,UAAW,QAGMC,E,iLAGb,OAAO,8BAAUF,MAAOA,EAAOG,MAAOC,KAAKC,MAAMF,MAAOG,SAAUF,KAAKC,MAAME,aAAcC,GAAG,SAAQC,UAAU,eAAeC,KAAM,Q,GAHtGC,IAAMC,WCJvCZ,EAAQ,CACVC,UAAW,QAEMY,E,iLAGb,OAAO,yBAAKb,MAAOA,EAAOc,UAAQ,EAACC,wBAAyBX,KAAKC,MAAMF,MAAQK,GAAG,UAAUC,UAAU,gC,GAHtEE,IAAMC,WCHxCZ,EAAQ,CACVgB,SAAU,OACVf,UAAW,OACXgB,YAAa,MACbC,WAAY,QAEKhB,E,iLAEb,OAAO,4BAAQiB,QAASf,KAAKC,MAAMc,QAASnB,MAAOA,EAAOoB,KAAK,SAASX,UAAS,cAASL,KAAKC,MAAMe,OAAQ,uBAAGpB,MAAO,CAACgB,SAAU,QAASP,UAAU,wBAAwBL,KAAKC,MAAMgB,MAAUjB,KAAKC,MAAMiB,U,GAF9KX,IAAMC,WCDzCW,EAAW,IAAIC,IAAOC,SAC1BF,EAASG,KAAO,SAASC,EAAMC,EAAON,GACpC,IAAII,EAAOF,IAAOC,SAASI,UAAUH,KAAKI,MAAM1B,KAAM2B,WACtD,OAAOL,EAAKM,QAAQ,KAAM,uBAG5BR,IAAOS,WAAW,CAChBC,QAAQ,EACRX,SAAUA,IAKZ,IAAMY,EAAgB,2kBAqCDC,E,YACnB,WAAY/B,GAAQ,IAAD,8BACjB,4CAAMA,KACDgC,MAAQ,CACXC,MAAOH,EACPI,OAAQ,CACNC,OAAQ,KAGZ,EAAKjC,aAAe,EAAKA,aAAakC,KAAlB,gBACpB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBACrB,EAAKE,WAAa,EAAKA,WAAWF,KAAhB,gBAClB,EAAKG,UAAY,EAAKA,UAAUH,KAAf,gBACjB,EAAKI,gBAAkB,EAAKA,gBAAgBJ,KAArB,gBAZN,E,iFAgBjBrC,KAAKsC,cAActC,KAAKiC,MAAMC,S,mCAGnBQ,GACRA,IACD1C,KAAK2C,SAAS,CACZT,MAAOQ,EAAQE,OAAO7C,QAGxBC,KAAKsC,cAAcI,EAAQE,OAAO7C,U,oCAIxB8C,IAETA,GAA2B,KAAdA,IACd7C,KAAK2C,SAAS,CACZR,OAAQ,CAACC,OAAQhB,IAAOyB,Q,mCAM5B7C,KAAK2C,SAAS,CACZT,MAAO,GACPC,OAAQ,CAACC,OAAQ,Q,kCAKnBpC,KAAK2C,SAAS,CACZT,MAAOH,EACPI,OAAQ,CAACC,OAAQhB,IAAOW,Q,wCAK1Be,UAAUC,UAAUC,UAAUhD,KAAKiC,MAAMC,S,+BAIzC,OACE,yBAAK7B,UAAU,aACb,kBAAC,EAAD,CAAWF,aAAcH,KAAKG,aAAcJ,MAAOC,KAAKiC,MAAMC,QAC9D,kBAAC,EAAD,CAAQnB,QAASf,KAAKuC,WAAYrB,KAAK,cAAcF,KAAK,aAAaC,KAAK,WAC5E,kBAAC,EAAD,CAAQF,QAASf,KAAKwC,UAAWtB,KAAK,aAAaF,KAAK,cAAcC,KAAK,YAC3E,kBAAC,EAAD,CAAQF,QAASf,KAAKyC,gBAAiBvB,KAAK,oBAAoBF,KAAK,gBAAgBC,KAAK,cAC1F,kBAAC,EAAD,CAAYlB,MAAOC,KAAKiC,MAAME,c,GAhEL5B,IAAMC,WC7CnByC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBX,WACrBA,UAAUY,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.63aa74ac.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst style = {\r\n    marginTop: '20px'\r\n};\r\n\r\nexport default class InputText extends React.Component {\r\n    render ()\r\n    {\r\n        return <textarea style={style} value={this.props.value} onChange={this.props.handleChange} id='editor'className='form-control' rows={7}></textarea>\r\n    }\r\n}","import React from 'react';\r\n\r\nconst style = {\r\n    marginTop: '20px'\r\n};\r\nexport default class OutputText extends React.Component {\r\n    render ()\r\n    {\r\n        return <div style={style} readOnly dangerouslySetInnerHTML={this.props.value}  id='preview' className=\"jumbotron p-3 lighten-5\"></div>\r\n    }\r\n}","import React from 'react';\r\n\r\nconst style = {\r\n    fontSize: '18px',\r\n    marginTop: '10px',\r\n    marginRight: '5px',\r\n    lineHeight: '24px'\r\n}\r\nexport default class InputText extends React.Component {\r\n    render(){\r\n        return <button onClick={this.props.onClick} style={style} type='button' className={`btn ${this.props.type}`}><i style={{fontSize: '24px'}} className='material-icons md-18'>{this.props.icon}</i>{this.props.text}</button>\r\n    }\r\n}","import React from 'react';\r\nimport marked from 'marked';\r\nimport InputText from './components/InputText';\r\nimport OutputText from './components/OutputText';\r\nimport Button from './components/Button';\r\n\r\n// Set parameters for Marked.js\r\nvar renderer = new marked.Renderer();\r\nrenderer.link = function(href, title, text) {\r\n  var link = marked.Renderer.prototype.link.apply(this, arguments);\r\n  return link.replace('<a', '<a target=\"_blank\"');\r\n}\r\n\r\nmarked.setOptions({\r\n  breaks: true,\r\n  renderer: renderer\r\n});\r\n//\r\n\r\n// Default input text\r\nconst defaultInputText = \r\n`# Markdown preview\r\n\r\nWelcome to my markdown previewer. \r\n\r\nCheck out this site's source code at my [GitHub](https://github.com/linardsblk/md-previewer).\r\n\r\n## Here are some examples:\r\n\\`You can write code like this...\\`\r\n\r\n...or write multiline code like this:\r\n\\`\\`\\`\r\nint a = 0;\r\na++;\r\ncout << a;\r\n\\`\\`\\`\r\n\r\nWrite lists:\r\n* One\r\n* Two \r\n* Three\r\n\r\n1. Element1\r\n2. Element2\r\n\r\n> Write quoted text \r\n\r\n**bold text example**\r\n\r\n\r\nSee more examples [here](https://www.markdownguide.org/basic-syntax/)\r\n\r\n\r\nThis page was made using [Reactjs](https://reactjs.org/)\r\n\r\n![React](./reactlogo.png)\r\n`\r\nexport default class App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      input: defaultInputText,\r\n      output: {\r\n        __html: ''\r\n      }\r\n    }\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.parseMarkdown = this.parseMarkdown.bind(this);\r\n    this.deleteText = this.deleteText.bind(this);\r\n    this.resetText = this.resetText.bind(this);\r\n    this.copyToClipBoard = this.copyToClipBoard.bind(this);\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.parseMarkdown(this.state.input);\r\n  }\r\n\r\n  handleChange(element) {\r\n    if(element) {\r\n      this.setState({\r\n        input: element.target.value\r\n      });\r\n\r\n      this.parseMarkdown(element.target.value);\r\n    }\r\n  }\r\n\r\n  parseMarkdown(inputText) {\r\n\r\n    if(inputText || inputText === '') {\r\n      this.setState({\r\n        output: {__html: marked(inputText)}\r\n      });\r\n    }\r\n  }\r\n\r\n  deleteText() {\r\n    this.setState({\r\n      input: '',\r\n      output: {__html: ''}\r\n    });\r\n  }\r\n\r\n  resetText() {\r\n    this.setState({\r\n      input: defaultInputText,\r\n      output: {__html: marked(defaultInputText)}\r\n    });\r\n  }\r\n\r\n  copyToClipBoard() {\r\n    navigator.clipboard.writeText(this.state.input);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <InputText handleChange={this.handleChange} value={this.state.input}/>\r\n        <Button onClick={this.deleteText} text='Delete text' type='btn-danger' icon='delete'/>\r\n        <Button onClick={this.resetText} text='Reset text' type='btn-primary' icon='refresh'/>\r\n        <Button onClick={this.copyToClipBoard} text='Copy to clipboard' type='btn-secondary' icon='file_copy'/>\r\n        <OutputText value={this.state.output}/>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}